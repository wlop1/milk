//
//  main.cpp
//  Leecode_test
//
//  Created by 王浩宇 on 2020/10/12.
//

// 反转整数（int）溢出问题处理
//#include <limits.h>
//class Solution {
//public:
//    int reverse(int x) {
//        int rev = 0;
//        while (x != 0) {
//            int pop = x % 10;
//            x /= 10;
//            if (rev > INT_MAX/10 || (rev == INT_MAX / 10 && pop > 7)) return 0;
//            if (rev < INT_MIN/10 || (rev == INT_MIN / 10 && pop < -8)) return 0;
//            rev = rev * 10 + pop;
//        }
//        return rev;
//    }
//};

//回文数判断
//class Solution {
//public:
//    bool isPalindrome(int x) {
//        // 特殊情况：
//        // 如上所述，当 x < 0 时，x 不是回文数。
//        // 同样地，如果数字的最后一位是 0，为了使该数字为回文，
//        // 则其第一位数字也应该是 0
//        // 只有 0 满足这一属性
//        // 注意 与 或 逻辑，加好相应的括号
//        if (x < 0 || (x % 10 == 0 && x != 0)) {
//            return false;
//        }
//
//        int revertedNumber = 0;
//        while (x > revertedNumber) {
//            revertedNumber = revertedNumber * 10 + x % 10;
//            x /= 10;
//        }
//
//        // 当数字长度为奇数时，我们可以通过 revertedNumber/10 去除处于中位的数字。
//        // 例如，当输入为 12321 时，在 while 循环的末尾我们可以得到 x = 12，revertedNumber = 123，
//        // 由于处于中位的数字不影响回文（它总是与自己相等），所以我们可以简单地将其去除。
//        return x == revertedNumber || x == revertedNumber / 10;
//    }
//};

//罗马数字转换 (hash)x
//#include <iostream>
//#include <map>
//using namespace std;
//
//class Solution{
//public:
//    int romaToint (string s){
//        int result = 0;
//        map<char,int> luomab={
//            {'I',1},
//            {'V',5},
//            {'X',10},
//            {'L',50},
//            {'C',100},
//            {'D',500},
//            {'M',1000}
//        };
//        for(int i=0; i < s.length() ;i++){
//            if(luomab[s[i]] < luomab[s[i+1]])
//                result -= luomab[s[i+1]];
//            else
//                result += luomab[s[i+1]];
//        }
//        return result;
//    }
//};

//最长公共前缀
//#include<iostream>
//#include<vector>
//#include<math.h>
//using namespace std;
//
//class Solution{
//public:
//    string longestCommenPrefix(vector<string>& strs){
//        if(!strs.size()){
//            return " ";
//        }
//        string prefix = strs[0];
//        for(int i=0; i<strs.size(); i++){
//            prefix = longestCommenPrefix(prefix, strs[i]);
//            if(!prefix.size()){
//                break;
//            }
//        }
//        return prefix;
//    }
//
//    string longestCommenPrefix(const string& str1, const string& str2){
//        int length = min(str1.size(),str2.size());
//        int index = 0;
//        while(index<length && str1[index] == str2[index]){
//            ++index;
//        }
//        return str1.substr(0,index);
//    }
//};


//Way2
//#include<iostream>
//#include<vector>
//using namespace std;
//
//class Solution {
//public:
//    string longestCommonPrefix(vector<string>& strs) {
//        if (!strs.size()) {
//            return "";
//        }
//        int length = strs[0].size();
//        int count = strs.size();
//        for (int i = 0; i < length; ++i) {
//            char c = strs[0][i];
//            for (int j = 1; j < count; ++j) {
//                if (i == strs[j].size() || strs[j][i] != c) {
//                    return strs[0].substr(0, i);
//                }
//            }
//        }
//        return strs[0];
//    }
//};

//括号匹配
//#include<iostream>
//#include<unordered_map>
//#include<stack>
//using namespace std;
//
//class Solution {
//public:
//    bool isValid(string s) {
//        int n = s.size();
//        if (n % 2 == 1) {
//            return false;
//        }
//        unordered_map<char, char> pairs = {
//            {')', '('},
//            {']', '['},
//            {'}', '{'}
//        };
//        stack<char> stk;
//
//        for (char ch: s) {
//            if (pairs.count(ch)) {
//                if (stk.empty() || stk.top() != pairs[ch]) {
//                    return false;
//                }
//                stk.pop();
//            }
//            else {
//                stk.push(ch);
//            }
//        }
//        return stk.empty();
//    }
//};


//双指针(快慢)删除数组重复项
//#include<vector>
//using namespace std;
//
//class Solution {
//public:
//    int removeDuplicates(vector<int>& nums) {
//        if (nums.empty()) return 0; // 别忘记空数组的判断
//        int slowIndex = 0;
//        for (int fastIndex = 0; fastIndex < (nums.size() - 1); fastIndex++){
//            if(nums[fastIndex] != nums[fastIndex + 1]) { // 发现和后一个不相同
//                nums[++slowIndex] = nums[fastIndex + 1];
//                //slowIndex = 0 的数据一定是不重复的，所以直接 ++slowIndex
//            }
//        }
//        return slowIndex + 1; //别忘了slowIndex是从0开始的，所以返回slowIndex + 1
//    }
//};


//二分查找并返回应在位置

//Way1

//#include<vector>
//using namespace std;
//
//class Solution{
//public:
//    int searchInsert(vector<int>& nums, int target){
//        return lower_bound(nums.begin(),nums.end(),target) - nums.begin();
//    }
//};

//#include<vector>
//using namespace std;
//class Solution{
//    public:
//    int searchInsert(vector<int>& nums, int target){
//        int  n = nums.size();
//        int left = 0, right = n-1;
//        while(left <= right){
//            int mid = left + (right - left)/2;
//            if(target > nums[mid])
//                left = mid +1;
//            else right = mid -1;
//        }
//        return left;
//    }
//};


//外观数列
//#include<iostream>
//using namespace std;
//
//class Solution {
//public:
//    string countAndSay(int n) {
//        if(n == 1) return "1";
//
//        string previous = countAndSay(n-1), result = ""; // 使用递归来一层一层往前推
//        int count = 1; // count用来计数
//
//        for(int i=0;i<previous.length();i++)
//        {
//            if(previous[i] == previous[i+1])
//            {
//                count ++; // 比如previous是111221时，111部分会让count=3，此时i在第三个1处
//            }
//            else
//            {
//                result += to_string(count) + previous[i]; // result会从空变成“31”（当i在第三个1处时）
//                count = 1; // 由于i在第三个1处时，i+1处的值为2，1 != 2，所以count重新变成1
//            }
//        }
//
//        return result;
//    }
//};
// 测试用例参考：n时是312211，previous是111221



//最大子序列和

//#include<vector>
//#include<math.h>
//
//using namespace std;
//
//class Solution {
//public:
//    int maxSubArray(vector<int>& nums) {
//        int res = nums[0];
//        int sum = 0;
//        for(int num : nums) {
//            if(sum >0)
//                sum += num;
//            else
//                sum = num;
//            res = max(res, sum);
//        }
//        return res;
//    }
//};

//class Solution2 {
//public:
//    int maxSubArray(vector<int>& nums) {
//        int pre = 0, maxAns = nums[0];
//        for (const auto &x: nums) {
//
//            pre = max(pre + x, x);  //确定加一个的正负（比较加一个数前与现在的大小）
//            maxAns = max(maxAns, pre); //比较加一个数后与现在的大小
//
//        }
//        return maxAns;
//    }
//};

//Your runtime beats 100 % of cpp submissions
//Your memory usage beats 20.15 % of cpp submissions (8.9 MB)


//数组最后一位加一

//#include<vector>
//using namespace std;
//class Solution2  {
//public:
//    vector<int> plusOne(vector<int>& digits) {
//        for(int i=digits.size()-1; i>=0; i--)
//        {
//            digits[i]++;
//            if(digits[i] == 10)  digits[i] = 0;
//            else return digits;    //爆赞！！！
//        }
//        digits.insert(digits.begin(), 1);
//        return digits;
//    }
//};


//二进制求和
//#include<iostream>
//using namespace std;
//class Solution {
//public:
//    string addBinary(string a, string b) {
//        string ans;
//        reverse(a.begin(), a.end());
//        reverse(b.begin(), b.end());
//
//        int n = max(a.size(), b.size()), carry = 0;
//        for (size_t i = 0; i < n; ++i) {
//            carry += i < a.size() ? (a.at(i) == '1') : 0;
//            carry += i < b.size() ? (b.at(i) == '1') : 0;
//            ans.push_back((carry % 2) ? '1' : '0');
//            carry /= 2;
//        }
//
//        if (carry) {
//            ans.push_back('1');
//        }
//        reverse(ans.begin(), ans.end());
//
//        return ans;
//    }
//};


//平方根（二分法）
//class Solution {
//public:
//    int mySqrt(int x) {
//        int l = 0, r = x, ans = -1;
//        while (l <= r) {
//            int mid = l + (r - l) / 2;
//            if ((long long)mid * mid <= x) {
//                ans = mid;
//                l = mid + 1;
//            } else {
//                r = mid - 1;
//            }
//        }
//        return ans;
//    }
//};


//爬楼梯（动态规划）
    //f(x)=f(x−1)+f(x−2)

//class Solution {
//public:
//    int climbStairs(int n) {
//    int p ,q ,r =1;
//    for(int i =0 ; i< n; ++i){
//        p = q;
//        q = r;
//        r = p +q;
//    }
//    return r;
//    }
//};


//删除排序链表中重复元素
// Definition for singly-linked list.
//struct ListNode {
//      int val;
//      ListNode *next;
//      ListNode(int x) : val(x), next() {}   //    next(NUll)
// };
//
//class Solution {
//public:
//    ListNode* deleteDuplicates(ListNode* head) {
//        ListNode *pi = head;
//        while(pi && pi->next ){
//            if(pi->val == pi->next->val ){
//                ListNode *del =pi ->next;
//                pi->next =pi ->next->next;
//                delete del;
//            }
//            else{
//                pi = pi->next;
//            }
//        }
//        return head;
//    }
//};


//合并两个有序数组（假设 nums1 有足够的空间（空间大小大于或等于 m + n））

//思路的重点一个是从后往前确定两组中该用哪个数字
//另一个是结束条件以第二个数组全都插入进去为止

//#include<vector>
//using namespace std;
//class Solution {
//public:
//    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
//        int last = m+n-1;
//        while(n){
//            if(m==0 || nums1[m-1] <= nums2[n-1]){
//                nums1[last--] =nums2[--n];
//            }else{
//                nums1[last--] =nums1[--m];
//            }
//        }
//    }
//};




//相同的树
//Definition for a binary tree node.

//struct TreeNode {
//     int val;
//     TreeNode *left;
//     TreeNode *right;
//     TreeNode() : val(0), left(nullptr), right(nullptr) {}
//     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
//     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
//};
//class Solution {
//public:
//    bool isSameTree(TreeNode* p, TreeNode* q) {
//        if (p == nullptr && q == nullptr) {
//            return true;
//        } else if (p == nullptr || q == nullptr) {
//            return false;
//        } else if (p->val != q->val) {
//            return false;
//        } else {
//            return isSameTree(p->left, q->left) && isSameTree(p->right, q->right);
//        }
//    }
//};


//两个链表相加

//Definition for singly-linked list.
//struct ListNode {
//    int val;
//    ListNode *next;
//    ListNode() : val(0) , next(nullptr) {}
//    ListNode(int x) : val(x) , next(nullptr) {}
//    ListNode(int x , ListNode *next) : val(x) , next(next) {}
//};
//
//class Solution {
//public:
//    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
//        ListNode *head = nullptr, *tail = nullptr;
//        int carry = 0;
//        while (l1 || l2) {
//            int n1 = l1 ? l1->val :0;  //不能直接赋值
//            int n2 = l2 ? l2->val :0;  //会产生“ListNode”类型的空指针内的成员访问的问题。
//            int sum = n1 + n2 + carry;
//            if (!head) {
//                head = tail = new ListNode(sum % 10);
//            } else {
//                tail->next = new ListNode(sum % 10);
//                tail = tail->next;
//            }
//            carry = sum / 10;
//            if (l1) {
//                l1 = l1->next;
//            }
//            if (l2) {
//                l2 = l2->next;
//            }
//        }//如果链表遍历结束后，有 carry>0，还需要在答案链表的后面附加一个节点，节点的值为carry。
//        if (carry > 0) {
//            tail->next = new ListNode(carry);
//        }
//        return head;
//    }
//};
